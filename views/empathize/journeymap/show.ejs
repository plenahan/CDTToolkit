<canvas id="myChart"></canvas>
<div class="form-row">
    <div class="form-item" style="border: 2px solid white; padding: 20px; border-radius: 2rem; background-color: whitesmoke;">
        <div class="image-details-label">Created: <%= creation.createdAt.toDateString() %></div>
    </div>
    <div class="form-item" style="border: 2px solid white; padding: 20px; border-radius: 2rem; background-color: whitesmoke;">
        <div class="image-details-label">User: <%= creation.user.email %></div>
    </div>
</div>
        
        <div style="display: none;" id="mydiv"><%= creation.chart %></div>
        <div style="display: none;" id="construct"><%= creation.construct %></div>
        <div style="display: none;" id="annotations"><%= creation.annotations %></div>
        <script>
            var data = JSON.parse(document.getElementById('mydiv').innerText);
            var construct = document.getElementById('construct').innerText;
            var annotations = JSON.parse(document.getElementById('annotations').innerText);

            let element;
    let lastEvent;

    function drag(moveX, moveY) {
    element.x += moveX;
    element.y += moveY;
    element.x2 += moveX;
    element.y2 += moveY;
    element.centerX += moveX;
    element.centerY += moveY;
    if (element.elements && element.elements.length) {
        for (const subEl of element.elements) {
        subEl.x += moveX;
        subEl.y += moveY;
        subEl.x2 += moveX;
        subEl.y2 += moveY;
        subEl.centerX += moveX;
        subEl.centerY += moveY;
        subEl.bX += moveX;
        subEl.bY += moveY;
        }
    }
    };

function handleElementDragging(event) {
  if (!lastEvent || !element) {
    return;
  }
  const moveX = event.x - lastEvent.x;
  const moveY = event.y - lastEvent.y;
  drag(moveX, moveY);
  lastEvent = event;
  return true;
};

function handleDrag(event) {
  if (element) {
    switch (event.type) {
    case 'mousemove':
      return handleElementDragging(event);
    case 'mouseout':
    case 'mouseup':
      lastEvent = undefined;
      break;
    case 'mousedown':
      lastEvent = event;
      break;
    default:
    }
  }
};

    const dragger = {
        id: 'dragger',
        beforeEvent(chart, args, options) {
            if (handleDrag(args.event)) {
            args.changed = true;
            return;
            }
        }
    };
            // let ctx = document.getElementById('myChart');
            // let chart1 = new Chart(ctx, {
            //     type: 'line',
            //     data: data,
            //     options: {
            //         scales: {
            //         y: {
            //             beginAtZero: true,
            //             display: false
            //         }
            //         }
            //     }
            //     });
            let midline = {
                            type: 'line',
                            borderColor: 'gray',
                            borderWidth: 3,
                            scaleID: 'y',
                            value: 50,
                            borderDash: [10, 5],
                        }
    let ctx = document.getElementById('myChart');
    let chart1 = new Chart(ctx, {
        type: 'line',
        plugins: [dragger],
        data: data,
        options: {
            events: ['mousedown', 'mouseup', 'mousemove', 'mouseout'],
            plugins: {
                legend: {
                    position: 'bottom'
                },
                annotation: {
                    enter(ctx) {
                    element = ctx.element;
                    },
                    leave() {
                    element = undefined;
                    lastEvent = undefined;
                    },
                    annotations
                }
            },
            scales: {
                y: {
                    title: {
                        display: true,
                        text: construct
                    },
                    ticks: {
                        display: false
                    },
                    grid: {
                        display: false
                    },
                    beginAtZero: true,
                    display: true,
                    min: 0,
                    max: 100
                },
                x: {
                    position: 'top'
                }
            }
        }
        });
        </script>
        